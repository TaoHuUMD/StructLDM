import argparse
import os

def import_project_opt(parser):
    #uv style

    set_posenet(parser)

    df = parser.add_argument_group('df')

    #diffusion 
    df.add_argument("--diff_animation", action='store_true', help="animation diffusion")
    df.add_argument("--diff_frame", type=int, default=-1)

    df.add_argument("--diffusion_name", type=str, default="", help="name of diffusion model")
    df.add_argument("--diffusion_epoch", type=int, default=-1)

    df.add_argument("--diffusion_step", type=int, default=-1)
    
    df.add_argument("--load_test_samples", action='store_true')

    df.add_argument("--samples_dir", type=str, default="", help="samples generated by diffusion model")

    df.add_argument("--clip_value", type=int, default=0, help="clip value in diffusion")

    
    # decoder setup
    df.add_argument("--mask_latent", action='store_true', help="mask uv latent in diffusion")
    
    df.add_argument("--uv_noise", action='store_true')
    df.add_argument("--uv_type", type=str, default="SMPL") #SMPL OR BF
    df.add_argument("--uv_reso", type=int, default=128) #SMPL OR BF

    df.add_argument('--stage1_ae_1d', action='store_true', help="use 1d embedding")
    df.add_argument('--stage1_ae_2d', action='store_true', help="use 2d embedding")

    df.add_argument('--stage1_cross_tex', action='store_true', help="cross tex to decouple pose and texture")

    df.add_argument('--org_nn', action='store_true')

    df.add_argument('--compositional_id_range', type=int, default=20)

    df.add_argument('--s1_cross_D_loss', action='store_true', help="cross tex to decouple pose and texture")
    df.add_argument('--s1_cross_tex_loss', action='store_true', help="cross tex to decouple pose and texture")

    df.add_argument('--stage1_ad_struct', action='store_true', help="use structured 1D latent")
    df.add_argument('--structured_pts', type=int, default=6890, help="number of sampled points")
    df.add_argument('--structured_dim', type=int, default=8, help="latent dim of structured points")
    df.add_argument('--structured_reso', type=int, default=64, help="structured reso uv map")
    df.add_argument('--structured_2d', action='store_true', help="number of sampled points")

    df.add_argument('--new_pose_est', action='store_true', help="reconstruction loss fitting")

    df.add_argument('--face_D', action='store_true', help="reconstruction loss fitting")


    df.add_argument('--eval_swap_uv', action='store_true', help="reconstruction loss fitting")


    df.add_argument('--stage1_s1_rec_fitting', action='store_true', help="reconstruction loss fitting")
    
    #network 
    df.add_argument('--ab_2dnoise_full_size', action='store_true', help="generate uv_reso x uv_reso noise")
    df.add_argument('--upsample_topo', action='store_true', help="topology based upsample")
    df.add_argument('--upsample_bl', action='store_true', help="bilinear based upsample")
    df.add_argument('--upsample_nn', action='store_true', help="NN based upsample")
    df.add_argument('--upsample_none', action='store_true', help="no upsample")
    
    df.add_argument('--stage1_ad_1d', action='store_true', help="use 1d embedding")
    df.add_argument('--stage1_1d_1d', action='store_true', help="use 1d embedding")
    df.add_argument("--style_dim_1d", type=int, default=128, help='')
    
    df.add_argument('--stage1_ad_2d', action='store_true', help="use 1d embedding")
    df.add_argument("--style_dim_2d", type=int, default=16, help='')

    df.add_argument('--aug_nr', action='store_true', help="use 1d embedding")
    df.add_argument('--small_rot', action='store_true', help="use 1d embedding")

    
    df.add_argument('--noise_1d_dim', type=int, help = 'load model, generally low-reso trained model')
    
    df.add_argument('--use_face', action='store_true', help="generation task, 1d noise")

    df.add_argument('--smooth_label', action='store_true', help="generation task, 1d noise")
    df.add_argument('--use_org_gan_loss', action='store_true', help="generation task, 1d noise")
    
    df.add_argument("--df_ab_Dtex", action='store_true', help='#whether D on tex field')
    df.add_argument("--df_ab_Dtex_pose", action='store_true', help='#whether Dtex is conditioned on pose map')
    df.add_argument("--df_ab_D_pose", action='store_true', help='D cond on pose')
    df.add_argument("--df_ab_tex_rec", action='store_true', help='uv tex recon')
    df.add_argument("--use_org_discrim", action='store_true', help='uv tex recon')

    df.add_argument("--df_ab_nerf_rec", action='store_true', help='whether rec loss on nerf')

    df.add_argument("--df_ab_sup_2d_style", action='store_true', help='sup net only condition on 2d style latent')
    df.add_argument("--use_global_posemap", action='store_true', help='use tri-plane')


    df.add_argument("--pid", type=int, default=-1, help="parallel training")
    df.add_argument("--tid", type=int, default=-1, help="parallel training")
    df.add_argument("--eval_metrics", action='store_true')

    df.add_argument("--test_lat_list", type=str, default="")

    df.add_argument("--load_tgt_file", action='store_true')
    df.add_argument("--tgt_name_diff", type=str, default="")
    
    df.add_argument("--smooth_kernel_size", type=int, default=5)
    df.add_argument("--smooth_relu", action='store_true')


    df.add_argument("--shape_editing", action='store_true')

    df.add_argument("--demo_pose_id_driven", type=str, default=None)


    df.add_argument("--df_nerf_dim", type=int, default=0)
    
    df.add_argument("--equal_tex_decoder", action='store_true')
    df.add_argument("--equal_layer_num", type=int, default=4)

    #demo
    df.add_argument("--load_comp_lat", action='store_true')
    df.add_argument("--load_motion_seq", action='store_true')
    df.add_argument("--motion_seq", type=str, default="")

    df.add_argument("--test_lat_num_start", type=int, default=0)
    df.add_argument("--test_lat_num", type=int, default=0)

    df.add_argument("--reb_test_output", action='store_true')

    df.add_argument("--test_lat_animation", action='store_true')

    df.add_argument("--free_view_rot_smpl", action='store_true')
    df.add_argument("--test_lat_freeview", action='store_true')


    df.add_argument("--transfer_texture", action='store_true')

    df.add_argument("--knn_part", action='store_true')

    df.add_argument("--struct_triplane", action='store_true')

    df.add_argument("--struct_trip_height", type=int, default=64 + 64 + 16)
    df.add_argument("--struct_trip_width", type=int, default= 64 + 64 + 48)

    df.add_argument("--sample_random_pose", action='store_true')
    df.add_argument("--load_sampled_pose", action='store_true', help="load for evaluation")

    df.add_argument("--pad_for_evaluations", action='store_true')




    df.add_argument("--smooth_net", action='store_true')

    df.add_argument("--distance_net", action='store_true')

    df.add_argument("--style_cond", action='store_true', help = "concat style with per-point feature")


    df.add_argument("--interp_in_eva", action='store_true')

    df.add_argument("--test_diff_part", type=int, default= 0 )


    df.add_argument("--part_eval", action='store_true')


    df.add_argument("--test_seq_len", type=int, default = 0)
    


    df.add_argument("--is_inv", action='store_true')

    df.add_argument("--specific_inv_u_df", action='store_true')
    
    df.add_argument("--normalize_norm", action='store_true')    
    df.add_argument("--specific_inv", action='store_true')    

    df.add_argument("--comp_face", action='store_true', help = "compositional face loss")

    df.add_argument("--no_visualize_pose", action='store_true', help = "compositional face loss")

    df.add_argument("--visualize_depth", action='store_true', help = "compositional face loss")
    df.add_argument("--visualize_normal", action='store_true', help = "compositional face loss")

    df.add_argument("--uvh_trip_direct", action='store_true')

    df.add_argument("--stage_1_ad_rec", action='store_true')

    df.add_argument("--stage_1_fitting", action='store_true')

    df.add_argument("--truncation_factor", type=float, default=0.7)

    df.add_argument("--noise_1d_eva", action='store_true')
    df.add_argument("--mean_noise_space", action='store_true')
    df.add_argument("--mean_latent_space", action='store_true')

    df.add_argument("--tex_2dp", action='store_true', help = "use 2d texture plane")
    df.add_argument("--tex_trip", action='store_true', help = "use 2d texture plane")
    df.add_argument("--tex_trip_c", type=int, help = "triplane channel")

    df.add_argument("--with_D", action='store_true')

    df.add_argument("--noise_1d", action='store_true')
    df.add_argument("--noise_2d", action='store_true')


def set_sdf(parser):
    sdf_setup = parser.add_argument_group('sdf_setup')
    sdf_setup.add_argument("--eikonal_lambda", type=float, default=0.5, help='')
    sdf_setup.add_argument("--min_surf_lambda", type=float, default=1.5, help='')
    sdf_setup.add_argument("--min_surf_beta", type=float, default=100, help='')

    sdf_setup.add_argument('--not_deltasdf',  action='store_true')

def set_posenet(parser):

    posenet_setup = parser.add_argument_group('posenet_setup')

    posenet_setup.add_argument("--posenet_outdim", type=int, default=64, help='')
    
    posenet_setup.add_argument("--tex_latent_dim", type=int, default=16, help='')

    posenet_setup.add_argument("--size_motion_window", type=int, default=5, help='')

    posenet_setup.add_argument("--pred_texture_dim", type=int, default=16, help='')

    posenet_setup.add_argument('--posemap_down', type=int, default=3)
    posenet_setup.add_argument('--posemap_resnet', type=int, default=3)

    posenet_setup.add_argument('--input_norm_uv', action='store_true', help="")

